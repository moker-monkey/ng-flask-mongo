var k=(C,u,n)=>new Promise((r,c)=>{var m=t=>{try{i(n.next(t))}catch(s){c(s)}},d=t=>{try{i(n.throw(t))}catch(s){c(s)}},i=t=>t.done?r(t.value):Promise.resolve(t.value).then(m,d);i((n=n.apply(C,u)).next())});import{P as x}from"./index-f8CJvKfu.js";import{aL as $}from"./entry/index-DABNShW--1710921375309.js";import{u as g}from"./index-I3-nUolQ.js";import{U as v,V as y,R as w,Y as R,j as _}from"./antd-DyzPRwGU.js";import{d as T,a7 as b,Z as E,a8 as V,a9 as e,k as o,u as a,G as f,$ as h}from"./vue-CtuDRv_L.js";import"./useContentViewHeight-D_59re7m.js";import"./useWindowSizeFn-P9ujTsk2.js";import"./onMountedOrActivated-BgwR2Bmq.js";const B=h("div",{class:"mt-4"},"打开浏览器的 network 面板，可以看到发出了六次请求",-1),N=h("div",{class:"mt-4"},"错误重试，retryInterval 如果不设置，默认采用简易的指数退避算法，取 1000 * 2 ** retryCount，也就是第一次重试等待 2s，第二次重试等待 4s，以此类推，如果大于 30s，则取 30s ",-1),U=T({__name:"index",setup(C){const u=()=>k(this,null,function*(){yield $()});function n(){return new Promise((s,l)=>{setTimeout(()=>{l(`TimeError: ${Date.now()}`)},1300)})}let r=0;const{loading:c,run:m,cancel:d}=g(n,{manual:!0,retryCount:5,onError(s){r===0&&(_.error("发现错误"),r++);const l=Date.now();_.error(`第 ${r++} 次重试, Time:${l}`),console.log(`Time: ${l}, Error: ${s}`)}}),i=()=>{r=0,m()},t=()=>{r=0,d(),_.info("已取消")};return(s,l)=>{const p=b("a-button");return E(),V(a(x),{title:"错误重试"},{default:e(()=>[o(a(v),{gutter:16},{default:e(()=>[o(a(y),{span:8},{default:e(()=>[o(a(w),{title:"Axios 错误重试"},{default:e(()=>[o(p,{onClick:u,type:"primary"},{default:e(()=>[f(" 点击会重新发起请求5次 ")]),_:1}),B]),_:1})]),_:1}),o(a(y),{span:8},{default:e(()=>[o(a(w),{title:"hooks 错误重试"},{default:e(()=>[o(a(R),null,{default:e(()=>[o(p,{onClick:i,type:"primary",disabled:a(c)},{default:e(()=>[f(" 使用 hooks 发起重试 ")]),_:1},8,["disabled"]),o(p,{onClick:t},{default:e(()=>[f("取消")]),_:1})]),_:1}),N]),_:1})]),_:1})]),_:1})]),_:1})}}});export{U as default};
